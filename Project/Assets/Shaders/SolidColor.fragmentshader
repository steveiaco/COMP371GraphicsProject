#version 330 core

// Light and Material Uniform Variables
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent

// array of lights
#define MAX_LIGHTS 8
uniform int NumLights;
uniform vec3 LightColors[MAX_LIGHTS];
uniform vec3 LightAttenuations[MAX_LIGHTS];

// Inputs
in vec3 v_color;					// vertex color: also diffuse color
in vec3 normal;						// Transformed normal in View Space
in vec3 eyeVector;					// Vector from the vertex to the Camera in View Space
in vec4 lightVectors[MAX_LIGHTS];    // Vector from the vertex to the Light in View Space
									// Length of lightVector is the distance between light and vertex
									// if w = 1: Point light, if w = 0: directional light

// Ouput data
out vec3 color;

void main()
{
	// Implment Phong Shading based on the parameters above
	// Remember that directional light don't have attenuation

	// Get vectors
	vec3 normalizedNormalVector = normalize(normal);
	vec3 normalizedEyeVector = normalize(eyeVector);

	// This should be the final color on the Vertex, including the lighting
	vec3 sumColor =  materialCoefficients.x * vec3(1.0,1.0,1.0); //Change this to change ambient color

	for (int i = 0; i < NumLights; i++)
	{
		// Get attenuation (if any)
		float distance = length(lightVectors[i]);
		float attenuation = mix(1.0, 1.0 / (LightAttenuations[i].x + LightAttenuations[i].y * distance + LightAttenuations[i].z * distance * distance), lightVectors[i].w);
	
		// Get vectors
		vec3 normalizedLightVector = normalize(lightVectors[i].xyz);
		vec3 normalizedReflectedVector = normalize(reflect(-normalizedLightVector, normalizedNormalVector));

		//Calculate coefficients
		float diffuseCoeff = materialCoefficients.y * max(dot(normalizedNormalVector, normalizedLightVector), 0.0);
		float specularCoeff = materialCoefficients.z * pow(max(dot(normalizedReflectedVector, normalizedEyeVector), 0.0), materialCoefficients.w);

		sumColor += attenuation * LightColors[i] * (diffuseCoeff + specularCoeff);
	}

	color = clamp(v_color * sumColor, 0.0, 1.0);
}
