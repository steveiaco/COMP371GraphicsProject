#version 330 core

// Uniform Inputs
uniform mat4 ViewTransform;
uniform mat4 ProjectionTransform;
uniform mat4 WorldTransform;

// Array of lights
#define MAX_LIGHTS 8
uniform int NumLights;
uniform vec4 LightPositions[MAX_LIGHTS];

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec4 vertexColor;
layout(location = 3) in vec2 vertexUV;

// Outputs to fragment shader
out vec2 UV;						// Texture mapping
out vec4 v_color;					// Vertex color
out vec3 normal;					// Transformed normal in View Space
out vec3 eyeVector;					// Vector from the vertex to the Camera in View Space
out vec4 lightVectors[MAX_LIGHTS];  // Vector from the vertex to the Light in View Space
									// Length of lightVector is the distance between light and vertex

void main()
{
	//Transforms
	mat4 MV = ViewTransform * WorldTransform;
	mat4 MVP = ProjectionTransform * MV;

	// Output position of the vertex, in clip space : MVP * position
    gl_Position =  MVP * vec4(vertexPosition_modelspace, 1.0f);

	// Get output to fragment shader
    normal = vec3(transpose(inverse(MV)) * vec4(vertexNormal_modelspace, 0.0));
	eyeVector = vec3(-MV * vec4(vertexPosition_modelspace, 1.0));
	v_color = vertexColor;
	UV = vertexUV;

	for (int i = 0; i < NumLights; i++)
	{
		lightVectors[i] = mix(-ViewTransform * LightPositions[i], ViewTransform * LightPositions[i] + vec4(eyeVector,0.0), LightPositions[i].w);
	}
}

