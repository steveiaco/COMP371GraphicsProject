#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec3 vertexColor; 

// Uniform
// Values that stay constant for the whole mesh.
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform mat4 ProjectionTransform;

// array of lights
#define MAX_LIGHTS 8
uniform int NumLights;
uniform vec4 LightPositions[MAX_LIGHTS];

// output to Fragment Shader
out vec3 v_color;

out vec3 normal;					// Transformed normal in View Space
out vec3 eyeVector;					// Vector from the vertex to the Camera in View Space
out vec4 lightVectors[MAX_LIGHTS];  // Vector from the vertex to the Light in View Space
									// Length of lightVector is the distance between light and vertex
out float visibility; //used for the fog

const float density = 0.003;
const float gradient = 1.8;

void main()
{
	//Transforms
	mat4 MV = ViewTransform * WorldTransform;

	vec4 positionViewSpace = MV * vec4(vertexPosition_modelspace, 1.0f);
	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  ProjectionTransform * positionViewSpace;
	v_color = vertexColor;

	

	// Prepare Data for Fragment Shader
	normal = vec3(transpose(inverse(MV)) * vec4(vertexNormal_modelspace, 0.0));
	eyeVector = vec3(-MV * vec4(vertexPosition_modelspace,1.0));
	for (int i = 0; i < NumLights; i++)
	{
		lightVectors[i] = mix(-ViewTransform * LightPositions[i], ViewTransform * LightPositions[i] + vec4(eyeVector,0.0), LightPositions[i].w);
	}

	float distanceFromCamera = length(positionViewSpace.xyz);
	visibility = clamp(exp(-pow((distanceFromCamera*density), gradient)), 0.0f, 1.0f);
}
